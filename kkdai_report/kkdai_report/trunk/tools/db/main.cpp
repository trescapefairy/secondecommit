#include <iostream>
#include "Table.h"
#include "mysqltest.h"
using namespace std;

vector< CTable* > g_vTables;

void parseTables( tinyxml2::XMLElement* node );
void gen();
void genHeader();
void genCpp();
void genPhp();
void genSql();
void genCreateSql();
void genYaf();

int main( int arg, char** argv )
{
	if ( arg < 2 )
	{
		mysql_test();
		return -1;
	}

	tinyxml2::XMLDocument doc;
	int err = doc.LoadFile( argv[1] );
	if ( tinyxml2::XML_NO_ERROR != err )
	{
		cout<<"load "<<argv[1]<<" failed"<<endl;
		return -2;
	}

	for ( tinyxml2::XMLElement* root = doc.RootElement();
			NULL != root; root = root->NextSiblingElement() )
	{
		string name = root->Name();
		if ( "tables" == name )
		{
			parseTables( root );
		}
	}

	gen();

	return 0;
}

void gen()
{
//	genHeader();
//	genCpp();
//	genPhp();
	genSql();
	genYaf();
}

void genHeader()
{
	ofstream fout( "DbCtrl.h" );
	
	fout<<"//This file is generated by db. Don't modify it."<<endl;
	fout<<"#ifndef _DB_CTRL_H_"<<endl;
	fout<<"#define _DB_CTRL_H_"<<endl;
	fout<<"#include <mysql.h>"<<endl;
	fout<<"#include <string>"<<endl;
	fout<<"#include <vector>"<<endl;
	fout<<"#include <assert.h>"<<endl;
	fout<<"using namespace std;"<<endl;
	fout<<endl;

	for ( size_t i=0; i<g_vTables.size(); ++i )
	{
		g_vTables[i]->genStruct(fout);
	}

	fout<<endl;
	fout<<"class DbCtrl"<<endl;
	fout<<"{"<<endl;
	fout<<"public:"<<endl;
	fout<<"	static MYSQL* connect( const string& host, const string& user, const string& pwd, const string& db, unsigned short port = 3306 );"<<endl;
	fout<<"	static void close( MYSQL* mysql );"<<endl;
	for ( size_t i=0; i<g_vTables.size(); ++i )
	{
		g_vTables[i]->genHeader(fout);
	}
	fout<<"};"<<endl;

	fout<<endl;
	fout<<"#endif //_DB_CTRL_H_"<<endl;

	fout.close();
}
void genCpp()
{
	ofstream fout( "DbCtrl.cpp" );
	fout<<"//This file is generated by db. Don't modify it."<<endl;
	fout<<"#include \"DbCtrl.h\""<<endl;
	fout<<"#include <stdio.h>"<<endl;
	fout<<"#include <iostream>"<<endl;
	fout<<"using namespace std;"<<endl;
	fout<<endl;

	fout<<"MYSQL* DbCtrl::connect( const string& host, const string& user, const string& pwd, const string& db, unsigned short port )"<<endl;
	fout<<"{"<<endl;
	fout<<"	MYSQL* mysql = new MYSQL;"<<endl;
	fout<<"	if ( mysql_init(mysql) == NULL )"<<endl;
	fout<<"	{"<<endl;
	fout<<"		return NULL;"<<endl;
	fout<<"	}"<<endl;
	fout<<"	if ( mysql_real_connect( mysql, host.data(), user.data(), pwd.data(), db.data(), port ) == NULL )"<<endl;
	fout<<"	{"<<endl;
	fout<<"		mysql_close(mysql);"<<endl;
	fout<<"		delete mysql;"<<endl;
	fout<<"		return NULL;"<<endl;
	fout<<"	}"<<endl;
	fout<<"	if ( mysql_set_character_set( mysql, \"UTF8\" ) != 0 )"<<endl;
	fout<<"	{"<<endl;
	fout<<"		mysql_close(mysql);"<<endl;
	fout<<"		delete mysql;"<<endl;
	fout<<"		return NULL;"<<endl;
	fout<<"	}"<<endl;
	fout<<"	return mysql;"<<endl;
	fout<<"}"<<endl;
	fout<<"void DbCtrl::close( MYSQL* mysql )"<<endl;
	fout<<"{"<<endl;
	fout<<"		if ( NULL != mysql )"<<endl;
	fout<<"		{"<<endl;
	fout<<"			mysql_close(mysql);"<<endl;
	fout<<"			delete mysql;"<<endl;
	fout<<"		}"<<endl;
	fout<<"}"<<endl;
	for ( size_t i=0; i<g_vTables.size(); ++i )
	{
		g_vTables[i]->genCpp(fout);
	}
	
	fout.close();
}

void genPhp()
{
	ofstream fout( "DbCtrl.class.php" );
	fout<<"<?php"<<endl;
	fout<<"//This file is generated by db. Don't modify it."<<endl;
	fout<<"namespace Home\\pub;"<<endl;
	fout<<"class DbCtrl"<<endl;
	fout<<"{"<<endl;
	for ( size_t i=0; i<g_vTables.size(); ++i )
	{
		g_vTables[i]->genPhp( fout );
	}
	fout<<"}"<<endl;
	fout<<"?>"<<endl;
	fout.close();
}

void genSql()
{
	genCreateSql();
}

void genCreateSql()
{
	ofstream fout( "create.sql" );
	for ( size_t i=0; i<g_vTables.size(); ++i )
	{
		g_vTables[i]->genCreateSql( fout );
	}
	fout.close();
}

void genYaf()
{
	for ( size_t i=0; i<g_vTables.size(); ++i )
	{
		g_vTables[i]->genYaf();
	}
}

void parseTables( tinyxml2::XMLElement* node )
{
	for ( tinyxml2::XMLElement* child = node->FirstChildElement();
			NULL != child; child = child->NextSiblingElement() )
	{
		CTable* p = new CTable;
		p->parse( child );
		g_vTables.push_back(p);
	}
}

<?php
/**
 * Created by PhpStorm.
 * User: tang.gaohang
 * Date: 2016/12/8
 * Time: 10:17
 */
use Prj\Misc\Christmas as Chris;
class ChristmasController extends Prj\BaseCtrl {
    /**
     * @var \Prj\Data\HdUser $user
     */
    protected $user;
    protected $userId;

    public function init()
    {
        header('Access-Control-Allow-Origin:http://act.kuaikuaidai.com');
        if(Chris::checkDebug()){
            Chris::log('###DEBUG###>>>');
            $this->_view->assign('DEBUG',true);
        }
        parent::init(); // TODO: Change the autogenerated stub
        if(!Chris::checkDebug()){
            list($start , $end) = Chris::$date;
            $now = date('YmdHis');
            if($now < $start.'100000'){
                $this->returnError('not_open');
                throw new \ErrorException();
            }elseif($now > $end.'235959'){
                $this->returnError('is_closed');
                throw new \ErrorException();
            }
        }
        $userId = \Sooh\Base\Session\Data::getInstance()->get('kkd_userId');
        $userName = \Sooh\Base\Session\Data::getInstance()->get('kkd_userName');
        if(!$userId){
            try{
                $ret = $this->checkkkdLogin($this->_request->get('jskey') , $this->_request->get('customerId'));
                Chris::log('checkkkdLogin>>>code:'.$ret['data']['code']);
            }catch (\ErrorException $e){
                $this->returnError($e->getMessage());
                throw $e;
            }
            $userId = $ret['data']['data']['customerId'];
            $userName = $ret['data']['data']['customerName'];
            \Sooh\Base\Session\Data::getInstance()->set('kkd_userId',$userId , 900);
            \Sooh\Base\Session\Data::getInstance()->set('kkd_userName',$userName , 900);
        }
        $user = \Prj\Data\HdUser::getCopy($userId);
        $this->userId = $userId;
        $user->load();
        if(!$user->exists()){
            $user->setField('customerName',$userName);
            $user->setField('investHP',$this->getInvestHP());
            $user->setField('normalHP',0);
            $user->setField('lastCollectYmd',0);
            $user->setField('createYmd',date('YmdHis'));
            $user->update();
        }else{
            if($this->getInvestHP() != $user->getField('investHP')){
                $user->setField('investHP',$this->getInvestHP());
                $user->update();
            }
        }
        $this->user = $user;
        Chris::$userId = $userId;
    }

    /**
     * 首页
     */
    public function indexAction(){
        $data['status'] = $this->getStatus();
        $data['hp'] = $this->user->getHP();
        $data['amount'] = Chris::getInvestAmount($this->userId);
        $data['award'] = Chris::getAward($data['hp']);
        $this->_view->assign('data',$data);
        $hdToken = md5(date('YmdHis'));
        \Sooh\Base\Session\Data::getInstance()->set('hd_lpt',$hdToken,900);
        setcookie('hd_lpt',$hdToken , time() + 900 ,'/');
        return $this->returnOK();
    }

    /**
     * 浇灌
     */
    public function collectAction(){
        if(!Chris::checkDebug())$this->checkSafetyStart();
        $val = Chris::awardVal;
        if(Chris::checkDebug())$val += mt_rand(100,500);
        $status = $this->getStatus();
        if(!$status || $status['cd'] > 0){
            return $this->returnError($status['cd']);
        }
        if(!$this->user->lock('collect_lock',3))return $this->returnError('提交太频繁,请稍后重试');
        $oldHP = $this->user->getField('normalHP');
        $this->user->setField('normalHP',$oldHP + $val);
        $this->user->setField('lastCollectYmd',date('YmdHis'));
        $tmp = \Prj\Data\HdHPLog::add($this->userId , $oldHP , $val );
        if(!$tmp)return $this->returnError('数据库错误');
        try{
            $tmp->setField('statusCode',1);
            $tmp->setField('exp','正常');
            $tmp->update();
            $this->user->update();
        }catch (\ErrorException $e){
            $this->rollBack($tmp , null , '用户表更新失败#'.$e->getMessage());
            return $this->returnError('系统正忙,请稍后重试');
        }
        $this->checkSafetyEnd();
        $this->_view->assign('data',['hp' => $val]);
        return $this->returnOK($status['notice']);
    }

    /**
     * 领取奖励
     * 1.扣除hp
     * 2.发送红包
     */
    public function awardAction(){
        if(!Chris::checkDebug())$this->checkSafetyStart();
        try{
            $ret = Chris::award($this->user);
        }catch (\ErrorException $e){
            return $this->returnError($e->getMessage());
        }
        $this->checkSafetyEnd();
        return $this->returnOK();
    }

    public function testSendAction(){
        $userId = '732015122514574605603';
        $tid = '888888';
        $api =  'http://10.25.65.19:10007'.'/phoenix-core-server/app/addCoupon';
        $token = 'd3LUo5EwmkQ4RLwZ';
        $data = [
            'amount' => 1,
            'customerId' => $userId,
            'days' => 30, //有效期
            'lowestAmount' => 5000, //起投金额
            'productType' => 1, //适用产品 1定期宝，2房宝宝，5赎楼贷，6理财计划；多个产品以英文逗号分隔；不填为无限定
            'source' => Chris::source, //奖励来源
            'type' => 1 //1—抵现券，2—加息券
        ];
        asort($data,SORT_STRING);
        $str = implode('',$data);
        $data['signature'] = md5($str.$token);
        $data['tid'] = $tid;
        if(!Chris::checkDebug()){
            $ret = \Prj\Misc\Funcs::curl_post($api , $data);
            if(empty($ret)){
                Chris::log('http#retry>>>');
                usleep(500000);
                $ret = \Prj\Misc\Funcs::curl_post($api , $data);
            }
        }else{
            sleep(3);
            $ret = '{"code":0,"message":"success"}';
        }

        Chris::log('#sendRedPacket>>>api:'.$api);
        Chris::log('#sendRedPacket>>>api:'.json_encode($data));
        Chris::log('#sendRedPacket>>>ret:'.$ret);
        $result = json_decode($ret , true);
        $result['code'] = $result['code'] == 501 ? 0 : $result['code'];
        $this->_view->assign('data',$result);
    }

    protected function rollBack($hplog = null , $redlogs = null , $msg = ''){
        throw new \ErrorException('rollBack 该方法已经迁移!');
    }

    protected function checkSafetyStart(){
        if(!$_COOKIE['hd_lpt'] || $_COOKIE['hd_lpt'] != \Sooh\Base\Session\Data::getInstance()->get('hd_lpt')){
            error_log('###checkSafety failed...>>>');
            $this->returnError('页面过期,请刷新重试');
            throw new \ErrorException();
        }
        error_log('###checkSafety success...>>>');
    }

    protected function checkSafetyEnd(){
        \Sooh\Base\Session\Data::getInstance()->set('hd_lpt',null);
    }

    protected function getStatus(){
        $now = date('His');
        $cdinit = Chris::cd;
        if(Chris::checkDebug())$cdinit = 15;
        foreach (Chris::$collectTime as $k => $v){
            $id = $k;
            list($name , $start , $end , $notice) = $v;
            if($now >= $start && $now < $end)break;
        }
        $cd = 0;
        $lastCollectYmd = $this->user->getField('lastCollectYmd');
        if($lastCollectYmd){
            $gone = time() - strtotime($lastCollectYmd);
            $cd = ($cdinit - $gone < 0) ? 0 : ($cdinit - $gone);
        }
        return [
            'id' => $id,
            'name' => $name,
            'cd' => $cd,
            'notice' => $notice
        ];
    }

    /**
     * 获取投资额(单位分)
     * @return int
     */
    protected function getInvestAmount(){
        throw new \ErrorException('getInvestAmount 该方法已经迁移!');
    }

    protected function getInvestHP(){
        return Chris::getInvestHP($this->userId);
    }

    /**
     * 获取当前奖品集合
     * @return array
     */
    protected function getAward(){
        throw new \ErrorException('getAward 该方法已经迁移!');
    }

    public function testAction(){
        sleep(10);
    }
}